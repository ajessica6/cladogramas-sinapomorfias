arvore_otimizada$tip.label <- LETTERS[1:length(arvore_otimizada$tip.label)]
print(arvore_otimizada)
# Remover as três primeiras entradas (texto explicativo)
arvore_otimizada$tip.label <- arvore_otimizada$tip.label[4:length(arvore_otimizada$tip.label)]
# Agora, redefinimos os rótulos para as letras de A a Z, de acordo com o número de indivíduos
arvore_otimizada$tip.label <- LETTERS[1:length(arvore_otimizada$tip.label)]
print(arvore_otimizada$tip.label)
plot(arvore_otimizada)
# Garantir que o número de rótulos corresponda ao número de folhas da árvore
arvore_otimizada$tip.label <- LETTERS[1:5]  # Definindo para 5 folhas
print(arvore_otimizada$tip.label)
# Agora, tente plotar novamente
plot(arvore_otimizada)
arvore_otimizada$edge
# Definindo rótulos para as folhas
arvore_otimizada$tip.label <- LETTERS[1:5]
# Verificando os rótulos das folhas
print(arvore_otimizada$tip.label)
# Tentando plotar a árvore novamente
plot(arvore_otimizada)
library(ape)
# Se você tiver as conexões de arestas e os rótulos das folhas:
edge <- matrix(c(31, 4, 31, 5, 32, 31, 32, 7, 29, 32, 29, 3, 28, 29, 28, 2, 30, 8, 30, 6, 
                 26, 28, 26, 30, 19, 26, 19, 1, 24, 17, 24, 15, 23, 24, 23, 16, 
                 21, 23, 21, 14, 27, 9, 27, 10, 20, 21, 20, 27, 25, 12, 25, 13, 
                 22, 20, 22, 25, 18, 19, 18, 22, 18, 11), byrow = TRUE, ncol = 2)
# Rótulos das folhas (A, B, C, D, E)
tip_labels <- LETTERS[1:5]
# Criar a árvore
arvore_nova <- phylo(edge = edge, tip.label = tip_labels)
# Plotar a árvore
plot(arvore_nova)
# Carregar o pacote ape
library(ape)
# Definir a matriz de arestas
edge <- matrix(c(31, 4, 31, 5, 32, 31, 32, 7, 29, 32, 29, 3, 28, 29, 28, 2, 30, 8, 30, 6, 
                 26, 28, 26, 30, 19, 26, 19, 1, 24, 17, 24, 15, 23, 24, 23, 16, 
                 21, 23, 21, 14, 27, 9, 27, 10, 20, 21, 20, 27, 25, 12, 25, 13, 
                 22, 20, 22, 25, 18, 19, 18, 22, 18, 11), byrow = TRUE, ncol = 2)
# Definir os rótulos das folhas
tip_labels <- LETTERS[1:5]
# Criar a árvore filogenética
arvore_nova <- as.phylo(list(edge = edge, tip.label = tip_labels))
# Plotar a árvore
plot(arvore_nova)
# Carregar o pacote ape
library(ape)
# Definir a matriz de arestas
edge <- matrix(c(31, 4, 31, 5, 32, 31, 32, 7, 29, 32, 29, 3, 28, 29, 28, 2, 30, 8, 30, 6, 
                 26, 28, 26, 30, 19, 26, 19, 1, 24, 17, 24, 15, 23, 24, 23, 16, 
                 21, 23, 21, 14, 27, 9, 27, 10, 20, 21, 20, 27, 25, 12, 25, 13, 
                 22, 20, 22, 25, 18, 19,
install.packages("ape")
install.packages("ape")
install.packages("ape")
library(ape)
# Carregar o pacote ape
library(ape)
# Definir a matriz de arestas
edge <- matrix(c(31, 4, 31, 5, 32, 31, 32, 7, 29, 32, 29, 3, 28, 29, 28, 2, 
                 30, 8, 30, 6, 26, 28, 26, 30, 19, 26, 19, 1, 24, 17, 24, 
                 15, 23, 24, 23, 16, 21, 23, 21, 14, 27, 9, 27, 10, 20, 
                 21, 20, 27, 25, 12, 25, 13, 22, 20, 22, 25, 18, 19, 18), 
               byrow = TRUE, ncol = 2)
# Definir os rótulos das folhas
tip_labels <- LETTERS[1:5]
# Criar a árvore filogenética
arvore_nova <- phylo(edge = edge, tip.label = tip_labels)
# Plotar a árvore
plot(arvore_nova)
# Mostra os rótulos dos terminais (folhas)
tip.label <- arvore_otimizada$tip.label
print(tip.label)
# Mostra os rótulos dos nós internos (devem ser NULL)
print(arvore_otimizada$node.label)
arvore_otimizada$node.label <- rep("", length(arvore_otimizada$node.label))
# Carregar o pacote ape
library(ape)
# Definir a matriz de arestas (corrigido o erro de tamanho)
edge <- matrix(c(31, 4, 31, 5, 32, 31, 32, 7, 29, 32, 29, 3, 28, 29, 28, 2, 
                 30, 8, 30, 6, 26, 28, 26, 30, 19, 26, 19, 1, 24, 17, 24, 
                 15, 23, 24, 23, 16, 21, 23, 21, 14, 27, 9, 27, 10, 20, 
                 21, 20, 27, 25, 12, 25, 13, 22, 20, 22, 25, 18, 19, 18), 
               byrow = TRUE, ncol = 2)
# Definir os rótulos das folhas (A, B, C, D, E)
tip_labels <- LETTERS[1:5]
# Criar um objeto de árvore filogenética (com o pacote 'ape')
arvore_nova <- list(edge = edge, tip.label = tip_labels)
class(arvore_nova) <- "phylo"  # Agora é uma árvore do tipo 'phylo'
# Plotar a árvore
plot(arvore_nova)
# Carregar o pacote ape
library(ape)
# Criar a matriz de arestas para uma árvore simples com 5 folhas
edge <- matrix(c(6, 1, 6, 2, 6, 3, 6, 4, 6, 5), byrow = TRUE, ncol = 2)
# Definir os rótulos das folhas (A, B, C, D, E)
tip_labels <- LETTERS[1:5]
# Criar o objeto de árvore filogenética
arvore_nova <- list(edge = edge, tip.label = tip_labels)
class(arvore_nova) <- "phylo"  # Agora é uma árvore do tipo 'phylo'
# Plotar a árvore
plot(arvore_nova)
q()
install.packages("phangorn")
install.packages("readxl")
library(readxl)
# Carregar a matriz de dados
file_path <- "C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx"
matriz <- read_excel(file_path)
# Verifique a estrutura da matriz carregada
head(matriz)
# Convertendo para formato binário (se necessário)
matriz_binaria <- as.data.frame(lapply(matriz, function(x) as.integer(x)))
library(phangorn)
# Criando o objeto de dados de parcimônia
tree <- pml(matriz_binaria)
# Realizando a análise
tree_analysis <- pratchet(tree)
# Calcular a distância de parsimônia (usando distância de Hamming)
distancia <- dist.binary(matriz_binaria)  # Ajuste conforme necessário
# Gerar a árvore de vizinhos mais próximos (neighbor-joining)
library(ape)
tree <- nj(distancia)
# Verifique a árvore
plot(tree, main = "Árvore Filogenética de Parsimônia", show.node.label = FALSE)
# Realizar a análise de parcimônia com a árvore gerada
tree_analysis <- pratchet(tree)
# Verifique os resultados
plot(tree_analysis$tree, main = "Árvore de Parsimônia", show.node.label = FALSE)
library(ape)
# Plotando a árvore
plot(tree_analysis$tree, show.node.label = FALSE, cex = 0.7)
# Remover etiquetas dos caracteres, se necessário
tip_labels <- c("A", "B", "C", "D", "E")  # Substitua conforme os indivíduos da sua matriz
tiplabels(tip_labels, adj = c(1, 1), cex = 1.2)
library(readxl)
# Carregar a matriz de dados
file_path <- "C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx"
matriz <- read_excel(file_path)
# Se a matriz tiver valores de texto ou fatores, converta-os para números (1 para presença, 0 para ausência)
matriz_binaria <- as.data.frame(lapply(matriz, function(x) ifelse(x == "presente", 1, 0)))
# Verifique se a conversão foi bem-sucedida
head(matriz_binaria)
library(ape)
# Calcular a distância de parsimônia (usando distância de Hamming)
distancia <- dist.binary(matriz_binaria)
# Verifique a matriz de distância
distancia
# Gerar a árvore de vizinhos mais próximos (Neighbor-Joining)
tree <- nj(distancia)
# Plotar a árvore
plot(tree, main = "Árvore Filogenética de Parsimônia", show.node.label = FALSE)
library(phangorn)
# Realizar a análise de parcimônia
tree_analysis <- pratchet(tree)
# Verifique a árvore gerada pela análise de parcimônia
plot(tree_analysis$tree, main = "Árvore de Parsimônia", show.node.label = FALSE)
# Instale os pacotes se necessário
install.packages("phangorn")
install.packages("ape")
install.packages("readxl")
# Carregar pacotes
library(phangorn)
library(ape)
library(readxl)
# Carregar a matriz de dados
file_path <- "C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx"
matriz <- read_excel(file_path)
# Converter para binário, caso seja necessário
matriz_binaria <- as.data.frame(lapply(matriz, function(x) ifelse(x == "presente", 1, 0)))
# Verifique a matriz binária
head(matriz_binaria)
# Calcular a distância binária entre as linhas da matriz
distancia <- dist.dna(as.matrix(matriz_binaria), model = "BIN")
# Verifique a matriz de distância
distancia
# Calcular a distância binária entre as linhas da matriz usando dist.binary()
distancia <- dist.binary(matriz_binaria)
# Verifique a matriz de distância
distancia
# Gerar a árvore de vizinhos mais próximos (Neighbor-Joining)
tree <- nj(distancia)
# Plotar a árvore
plot(tree, main = "Árvore Filogenética de Parsimônia", show.node.label = FALSE)
# Realizar a análise de parcimônia
tree_analysis <- pratchet(tree)
# Plotar a árvore de parcimônia
plot(tree_analysis$tree, main = "Árvore de Parsimônia", show.node.label = FALSE)
# Definir os rótulos como letras
tip_labels <- LETTERS[1:length(tree$tip.label)]
# Plotar a árvore com os rótulos como letras
plot(tree_analysis$tree, tip.label = tip_labels, main = "Árvore Filogenética com Letras", show.node.label = FALSE)
# Carregar a planilha e converter para binário
library(readxl)
matriz <- read_excel("C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx")
# Convertendo a matriz para binária, com 1 para presença e 0 para ausência
matriz_binaria <- as.data.frame(lapply(matriz, function(x) ifelse(x == "presente", 1, 0)))
# Verifique a matriz binária
head(matriz_binaria)
# Carregar o pacote phangorn
library(phangorn)
# Calcular a distância binária
distancia <- dist.binary(matriz_binaria)
# Verificar a matriz de distância
distancia
# Gerar a árvore de vizinhos mais próximos (Neighbor-Joining)
tree <- nj(distancia)
# Plotar a árvore
plot(tree, main = "Árvore Filogenética de Parsimônia", show.node.label = FALSE)
# Instalar e carregar o pacote ade4 se ainda não estiver instalado
if (!require(ade4)) install.packages("ade4")
library(ade4)
# Calcular a distância binária entre as linhas da matriz
distancia <- dist.binary(matriz_binaria)
# Verifique a matriz de distância
distancia
# Verifique se a matriz binária está carregada corretamente
head(matriz_binaria)
# Carregar o pacote ade4
library(ade4)
# Calcular a distância binária entre as linhas da matriz
distancia <- dist.binary(matriz_binaria)
# Verificar a matriz de distância
distancia
# Calcular a distância binária utilizando o índice de Jaccard (Método 1)
distancia <- dist.binary(matriz_binaria, method = 1)
# Gerar a árvore filogenética usando o método Neighbor-Joining (NJ)
library(ape)
tree <- nj(distancia)
# Carregar os pacotes necessários
library(phangorn)
library(ape)
# Supondo que a matriz binária já esteja carregada na variável 'matriz_binaria'
# Calcular a distância binária com o índice de Jaccard (Método 1)
distancia <- dist.binary(matriz_binaria, method = 1)
# Gerar a árvore de vizinhos mais próximos (Neighbor-Joining)
tree <- nj(distancia)
# Definir os rótulos como letras (A, B, C, etc.)
tip_labels <- LETTERS[1:length(tree$tip.label)]
# Plotar a árvore com os rótulos como letras
plot(tree, tip.label = tip_labels, main = "Árvore Filogenética com Letras", show.node.label = FALSE)
# Carregar os pacotes necessários
library(phangorn)
library(ape)
# Supondo que a matriz binária já esteja carregada na variável 'matriz_binaria'
# Calcular a distância binária com o índice de Jaccard (Método 1)
distancia <- dist.binary(matriz_binaria, method = 1)
# Verificar se há valores ausentes (NA) na matriz de distâncias
if(any(is.na(distancia))) {
  # Caso haja NA, usamos njs() que lida com valores ausentes
  tree <- njs(distancia)
} else {
  # Se não houver NA, usamos o método normal
  tree <- nj(distancia)
}
# Definir os rótulos como letras (A, B, C, etc.)
tip_labels <- LETTERS[1:length(tree$tip.label)]
# Plotar a árvore com os rótulos como letras
plot(tree, tip.label = tip_labels, main = "Árvore Filogenética com Letras", show.node.label = FALSE)
install.packages("ape")
install.packages("readxl")
library(ape)
library(readxl)
# Carregar a matriz de caracteres
matriz <- read_excel("C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx")
# Verificar as primeiras linhas da matriz para conferir se foi carregada corretamente
head(matriz)
# Construir a árvore de parcimônia
arvore <- pbt(matriz_bin)
# Exibir a árvore
plot(arvore, main = "Árvore de Parcimônia")
library(ape)
library(readxl)
# Carregar a matriz de caracteres
matriz <- read_excel("C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx")
# Verificar as primeiras linhas da matriz para conferir se foi carregada corretamente
head(matriz)
# Criar uma matriz de distâncias baseada na máxima parcimônia
distancias <- dist.dna(matriz_bin, model = "RAW")  # Ou use "K80" ou outro modelo se preferir
# Construir a árvore de parcimônia usando o método de parsimônia
arvore_parcimonia <- nj(distancias)  # 'nj' é a função para construção da árvore de vizinhança de máxima parcimônia
# Exibir a árvore
plot(arvore_parcimonia, main = "Árvore de Parcimônia")
# Calcular a distância usando a distância de Jaccard (ou outra métrica apropriada)
distancias <- dist(matriz_bin, method = "binary")
# Visualizar a matriz de distâncias
print(distancias)
# visualizar a matriz de distâncias 
print(distancias)
# Carregar pacotes necessários
install.packages("ape")
install.packages("readxl")
library(ape)
library(readxl)
# Carregar a matriz do Excel
matriz <- read_excel("C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx")
# Verifique se há uma coluna com nomes das espécies/indivíduos
# Suponha que a primeira coluna seja os nomes, e o resto sejam os caracteres
rownames(matriz) <- matriz[[1]]           # Define os nomes das linhas
matriz <- matriz[ , -1]                   # Remove a primeira coluna dos dados
# Converter os dados para binário (ajuste se sua codificação for diferente)
matriz_bin <- as.data.frame(lapply(matriz, as.numeric))  # se os dados forem numéricos (0/1)
# Ou, caso você tenha "ausente/presente":
# matriz_bin <- as.data.frame(lapply(matriz, function(x) ifelse(x == "ausente", 0, 1)))
# Calcular a matriz de distâncias binária
distancias <- dist(matriz_bin, method = "binary")  # use aspas duplas aqui!
# Construir a árvore usando o método de vizinhança (Neighbor-Joining)
arvore_parcimonia <- nj(distancias)
# Plotar a árvore
plot(arvore_parcimonia, main = "Árvore de Parcimônia")
# Carregar pacotes necessários
install.packages("ape")
install.packages("readxl")
library(ape)
library(readxl)
# Ler a matriz do Excel
matriz <- read_excel("C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx")
# Assumindo que a primeira coluna seja os nomes dos táxons
rownames(matriz) <- matriz[[1]]     # Define os nomes das linhas como os nomes dos táxons
matriz <- matriz[ , -1]             # Remove a primeira coluna (nomes) do corpo da matriz
# Converter os caracteres para numérico (binário)
# Supondo que os dados estejam como 0 (ausente) e 1 (presente)
matriz_bin <- as.data.frame(lapply(matriz, as.numeric))
# Verifique se os rownames estão corretos:
print(rownames(matriz_bin))
# Calcular distância binária entre os táxons (linhas)
distancias <- dist(matriz_bin, method = "binary")
# Construir a árvore com método de Neighbor Joining (vizinho mais próximo)
arvore <- nj(distancias)
# Plotar a árvore com nomes dos táxons
plot(arvore, main = "Árvore de Parcimônia entre Táxons")
# Carregar pacotes necessários
install.packages("ape")
install.packages("readxl")
library(ape)
library(readxl)
# Ler a matriz do Excel
matriz <- read_excel("C:/Users/jesna/Downloads/matriz ccompleta com legendas (1).xlsx")
# Assumir que a primeira coluna contém os nomes dos táxons: A, B, C, ..., N
rownames(matriz) <- matriz[[1]]     # Define os nomes dos táxons como nomes das linhas
matriz <- matriz[ , -1]             # Remove a coluna de nomes do corpo da matriz
# Garantir que os dados estejam em formato binário (numérico)
matriz_bin <- as.data.frame(lapply(matriz, as.numeric))
rownames(matriz_bin) <- rownames(matriz)  # Reafirma os nomes das linhas
# Calcular a matriz de distâncias entre os táxons (linhas)
distancias <- dist(matriz_bin, method = "binary")
# Construir a árvore de vizinhança (Neighbor-Joining)
arvore <- nj(distancias)
# Plotar a árvore com os táxons nomeados
plot(arvore, main = "Árvore de Parcimônia com Tá
# Melhorar aparência
plot(arvore, main = "Árvore de Parcimônia com Táxons A
cd ~/cladogramas-sinapomorfias-dados
cd "C:\Users\jesna\OneDrive\cladogramas-sinapomorfias-dados"
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/scripts")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/scripts")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/scripts")
setwd("C:/Users/jesna/OneDrive/script")
source("01_ler_dados")
source("02_criar_matriz")
source("03_gerar_cladogramas")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/scripts")
source("01_ler_dados")
setwd("C:/Users/jesna/OneDrive/script")
list.files()
setwd("C:/Users/jesna/OneDrive/script")
source("01_ler_dados.R")
source("02_criar_matriz.R")
source("03_gerar_cladogramas.R")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados")
source("01_ler_dados.R")
source("02_criar_matriz.R")
source("03_gerar_cladogramas.R")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/script")
source("01_ler_dados.R")
source("02_criar_matriz.R")
source("03_gerar_cladogramas.R")
install.packages("tidyverse")
install.packages("ape")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/script")
source("01_ler_dados.R")
source("02_criar_matriz.R")
source("03_gerar_cladogramas.R")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/script")
source("01_ler_dados.R")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/script")
source("01_ler_dados.R")
install.packages("tidyverse")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/script")
source("01_ler_dados.R")
source("02_criar_matriz.R")
source("03_gerar_cladogramas.R")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/script")
source("01_ler_dados.R")
list.files("../dados")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/script")
source("01_ler_dados.R")
source("02_criar_matriz.R")
source("03_gerar_cladogramas.R")
gerar_clado(plantas1, "cladograma_plantas_1")
gerar_clado(plantas2, "cladograma_plantas_2")
gerar_clado(plantas3, "cladograma_plantas_3")
gerar_clado(deutero,  "cladograma_deuterostomios")
gerar_clado(plantas3, "cladograma_plantas_3")
gerar_clado(deutero,  "cladograma_deuterostomios")
gerar_clado(plantas1, "cladograma_plantas_1")
gerar_clado(plantas2, "cladograma_plantas_2")
gerar_clado(plantas3, "cladograma_plantas_3")
gerar_clado(deutero,  "cladograma_deuterostomios")
source("03_gerar_cladogramas.R")
plantas2 <- read_csv("../dados/plantas_morfologicas_2.csv") %>%
  column_to_rownames("Grupo") %>%
  as.matrix()
gerar_clado(plantas2, "cladograma_plantas_2")
setwd("C:/Users/jesna/OneDrive/cladogramas-sinapomorfias-dados/script")
source("03_gerar_cladogramas.R")
dir.create("../resultados", showWarnings = FALSE)
source("03_gerar_cladogramas.R")
plantas3 <- read_csv("../dados/plantas_moleculares.csv") %>%
  column_to_rownames("Grupo") %>%
  as.matrix()
gerar_clado(plantas3, "cladograma_plantas_3")
q()
q()
